.\" Авторское право (c) 2000
.\"	Mike W. Meyer
.\"
.\" Распространение и использование в исходном коде и двоичном формате, с
.\" изменениями или без них, разрешено при соблюдении следующих условий:
.\" 1. При повторном распространении исходного кода должны сохраняться вышеуказанное
.\"	 уведомление об авторских правах, этот список условий и следующий отказ от ответственности.
.\" 2. При повторном распространении в двоичной форме должны воспроизводиться вышеуказанное
.\"	 уведомление об авторских правах, этот список условий и следующий отказ от ответственности в
.\"	 документации и/или других материалах, прилагаемых к дистрибутиву.
.\"
.\" ДАННОЕ ПРОГРАММНОЕ ОБЕСПЕЧЕНИЕ ПРЕДОСТАВЛЯЕТСЯ АВТОРОМ "КАК ЕСТЬ", И
.\" МЫ НЕ ДАЕМ НИКАКИХ ЯВНЫХ ИЛИ ПОДРАЗУМЕВАЕМЫХ ГАРАНТИЙ, ВКЛЮЧАЯ
.\" ПОДРАЗУМЕВАЕМЫЕ ГАРАНТИИ ТОВАРНОЙ ПРИГОДНОСТИ И ПРИГОДНОСТИ ДЛЯ ОПРЕДЕЛЕННОЙ ЦЕЛИ И Т.П.
.\" АВТОР НИ В КОЕМ СЛУЧАЕ НЕ НЕСЕТ ОТВЕТСТВЕННОСТИ
.\" ЗА ЛЮБОЙ ПРЯМОЙ, КОСВЕННЫЙ, СЛУЧАЙНЫЙ, ОСОБЫЙ, ПОКАЗАТЕЛЬНЫЙ ИЛИ ЛОГИЧЕСКИ ВЫТЕКАЮЩИЙ
.\" УЩЕРБ (ВКЛЮЧАЯ: ПРИОБРЕТЕНИЕ ЗАМЕНЯЮЩИХ ТОВАРОВ ИЛИ УСЛУГ; ПОТЕРЮ ВОЗМОЖНОСТИ ИСПОЛЬЗОВАНИЯ,
.\" ДАННЫХ ИЛИ ПРИБЫЛИ; ПЕРЕБОИ В РАБОТЕ)
.\" НЕЗАВИСИМО ОТ ПРИЧИН И ПО ЛЮБОЙ ТЕОРИИ ОТВЕТСТВЕННОСТИ, БУДЬ ТО В КОНТРАКТЕ,
.\" ИЛИ ПРАВОНАРУШЕНИЕ (ВКЛЮЧАЯ ХАЛАТНОСТЬ ИЛИ ИНОЕ ПРАВОНАРУШЕНИЕ ИНЫМ ОБРАЗОМ),
.\" ВОЗНИКАЮЩЕЕ КАКИМ-ЛИБО ОБРАЗОМ В РЕЗУЛЬТАТЕ ИСПОЛЬЗОВАНИЯ ДАННОГО ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ,
.\" ДАЖЕ ЕСЛИ ВЫ БЫЛИ ПРЕДУПРЕЖДЕНЫ О ВОЗМОЖНОСТИ ТАКОГО УЩЕРБА.
.\"
.Dd Август 1, 2023
.Dt BUILD 7
.Os
.Sh НАИМЕНОВАНИЕ
.Nm build
.Nd Общие инструкции по сборке системы
.Sh ОПИСАНИЕ
Исходные файлы для
.Fx
истемы и ее приложений содержатся в трех разных каталогах,
обычно
.Pa /usr/src ,
.Pa /usr/doc ,
и
.Pa /usr/ports .
Эти каталоги могут быть изначально пустыми или вообще не существовать,
пока не будут обновлены с помощью Git
.Po устанавливается из пакетов с
.Xr pkg 7
.Xr pkg 7
или из
.Xr ports 7 Pc .
Каталог
.Pa /usr/src
содержит исходные файлы
.Dq "базовой системы",
которые в общих чертах определяются как элементы, необходимые для восстановления системы
до работоспособного состояния.
Каталог
.Pa /usr/doc
содержит исходную документацию по системе, за исключением страниц руководства.
Каталог
.Pa /usr/ports
содержит дерево, которое предоставляет согласованный интерфейс
для создания и установки приложений сторонних производителей.
Дополнительные сведения о процессе создания портов см. в
.Xr ports 7 .
.Pp
Команда
.Xr make 1
используется в каждом из этих каталогов для сборки и
установки компонентов в этом каталоге.
При использовании
.Xr make 1
в любом каталоге команда
.Xr make 1
рекурсивно запускается во всех подкаталогах.
Если цель не указана, элементы в каталогах будут созданы
и никаких дальнейших действий предпринято не будет.
.Pp
Дерево исходных текстов должно быть доступно только для чтения.
Как описано в
.Xr make 1 ,
объекты обычно создаются в отдельной иерархии каталогов объектов,
определяемой переменной среды
.Va MAKEOBJDIRPREFIX ,
или в
.Pa /usr/obj
если переменная
.Va MAKEOBJDIRPREFIX
не задана.
Каталог канонических объектов описан в документации к целевому объекту
.Cm buildworld
ниже.
.Pp
Сборкой можно управлять, определяя переменные
.Xr make 1
вариации которых описанны в разделе
.Sx ENVIRONMENT
секцией ниже, и переменные, задокументированные в
.Xr make.conf 5 .
.Pp
Компоненты, включаемые в сборку по умолчанию, указаны в файле
.Pa /etc/src.conf
в дереве исходных файлов.
Чтобы переопределить файл по умолчанию,
включите параметр SRCCONF в шаги создания,
указывая на пользовательский файл src.conf file.
Для получения дополнительной информации смотрите файл
.Xr src.conf 5 .
.Pp
В следующем списке приведены имена и действия для целевых объектов,
поддерживаемых системой:
.Bl -tag -width ".Cm cleandepend"
.It Cm analyze
Запускает статический анализатор Clang для всех объектов и выводит выходные данные в стандартный вывод.
.It Cm check
Запускает тесты для заданного подкаталога.
По умолчанию используется каталог
.Pa ${.OBJDIR} ,
но каталог проверки можно изменить с помощью
.Pa ${CHECKDIR} .
.It Cm checkworld
Запускает пакет тестов
.Fx
на установленной платформе world.
.It Cm clean
Удаляет все файлы, созданные в процессе сборки.
.It Cm cleandepend
Удаляет файлы
.Pa ${.OBJDIR}/${DEPENDFILE}*
сгенерированные предыдущими шагами
.Dq Li "make"
и
.Dq Li "make depend" .
.It Cm cleandir
Удаляет каталог каноничных объектов, если он существует,
или выполняет действия, эквивалентные
.Dq Li "make clean cleandepend"
если его нет.
Этот целевой объект также удалит ссылку 
.Pa obj
в
.Pa ${.CURDIR}
если она существует.
.Pp
Рекомендуется запустить
.Dq Li "make cleandir"
дважды: первый вызов удалит каталог канонических объектов,
а второй очистит
.Pa ${.CURDIR} .
.It Cm depend
Генерирует список зависимостей сборки в файле
.Pa ${.OBJDIR}/${DEPENDFILE} .
Зависимости для каждого объекта генерируются во время сборки и сохраняются в
.Pa ${.OBJDIR}/${DEPENDFILE}.${OBJ} .
.It Cm install
Устанавливает результаты сборки в соответствующую локальную
папку в иерархии каталогов установки, указанной в переменной
.Va DESTDIR .
.It Cm obj
Создаёт каталог канонических объектов, связанный с
текущим каталогом.
.It Cm objlink
Создаёт символическую ссылку на каталог канонических объектов в
.Pa ${.CURDIR} .
.It Cm tags
Генерирует файл тегов, используя программу, расположенную в
.Xr make 1
в переменной
.Va CTAGS .
Система сборки поддерживает
.Xr ctags 1
и
.Nm "GNU Global" .
.El
.Pp
Другими поддерживаемыми целевыми объектами в каталоге
.Pa /usr/src
являются:
.Bl -tag -width ".Cm distributeworld"
.It Cm buildenv
Создаёт интерактивную оболочку с переменными среды,
настроенными для построения системы или отдельных
компонентов.
Для перекрестного построения целевой архитектуры
необходимо указать в
.Xr make 1
переменные
.Va TARGET_ARCH
и
.Va TARGET .
.Pp
Этот целевой объект полезен только после того, как будет собран полный набор инструментов
(включая компилятор, компоновщик, ассемблер, заголовки
и библиотеки); смотрите описание
.Cm toolchain
ниже.
.It Cm buildworld
Соберите все, кроме ядра, сконфигурируйте файлы в
.Pa etc ,
и
.Pa release .
Каталог объектов может быть изменен
из файла
.Pa /usr/obj
по умолчанию, установив
.Pa MAKEOBJDIRPREFIX
.Xr make 1
переменной.
Используемый префикс местоположения фактической сборки
зависит от параметра
.Va WITH_UNIFIED_OBJDIR
из
.Xr src.conf 5 .
Если включить, то будет установлено
.Pa ${MAKEOBJDIRPREFIX}${.CURDIR}/${TARGET}.${TARGET_ARCH}
для всех сборок.
Если он отключен, то будет установлено
.Pa ${MAKEOBJDIRPREFIX}${.CURDIR}
для собственных сборок и
.Pa ${MAKEOBJDIRPREFIX}/${TARGET}.${TARGET_ARCH}${.CURDIR}
для кросс-сборок и собственных сборок с переменной
.Va CROSS_BUILD_TESTING .
.It Cm cleankernel
Попытается очистить цели, созданные
.Cm buildkernel ,
или аналогичный этап, построенный на основе того же
исходного каталога и
.Va KERNCONF .
.It Cm cleanworld
Попытается очистить целевые объекты, созданные с помощью
.Cm buildworld ,
или аналогичного шага, созданного из этого исходного
каталога.
.It Cm cleanuniverse
Когда параметр
.Va WITH_UNIFIED_OBJDIR
включен, попытайтесь очистить целевые объекты, созданные
.Cm buildworld ,
.Cm universe ,
или аналогичном шаге, для любой архитектуры,
созданной из этого исходного каталога.
.It Cm distributeworld
Распространяет все, что было скомпилировано на шаге
.Cm buildworld .
Файлы размещаются в иерархии каталогов, в
.Xr make 1
с помощью указанной переменной
.Va DISTDIR .
Этот целевой объект используется при создании релиза; смотрите
.Xr release 7 .
.It Cm native-xtools
Этот целевой объект создает перекрестную цепочку инструментов для данного
.Sy TARGET
и
.Sy TARGET_ARCH ,
а также список выбранных статических пользовательских инструментов для хост-системы.
Это предназначено для использования в jail, где QEMU используется для
повышения производительности за счет исключения двоичных файлов эмуляции,
которые не нужно эмулировать.
.Sy TARGET
и
.Sy TARGET_ARCH
должны быть определены.
.It Cm native-xtools-install
Устанавливает результаты в
.Pa ${DESTDIR}/${NXTP}
где
.Va NXTP
по умолчанию используется значение
.Pa nxb-bin .
.Sy TARGET
и
.Sy TARGET_ARCH
должны быть определены.
.It Cm packageworld
Архивирует результаты
.Cm distributeworld ,
поместив их в
.Va DISTDIR .
Этот целевой объект используется при сборке-релизе; смотрите
.Xr release 7 .
.It Cm installworld
Устанавливает все, что было создано с помощью
.Cm buildworld
в иерархию каталогов, на которую указывает в
.Xr make 1
переменная
.Va DESTDIR .
.Pp
При установке в файловую систему NFS и запуске
.Xr make 1
с параметром
.Fl j ,
убедитесь что
.Xr rpc.lockd 8
запущен как на клиенте, так и на сервере.
Смотрите
.Xr rc.conf 5
о том, как заставить его запускаться во время загрузки.
.It Cm toolchain
Создаёт набор инструментов для сборки,
необходимый для сборки остальной части системы.
Для межархитектурных сборок этот шаг создает набор инструментов для разных архитектур.
.It Cm universe
Для каждой архитектуры выполните команду
.Cm buildworld
следующей за
.Cm buildkernel
для всех ядер для этой архитектуры, включая
.Pa LINT .
Эта команда занимает много времени.
.It Cm kernels
Подобно
.Cm universe
с
.Va WITHOUT_WORLDS
определен таким образом, что создаются только ядра для каждой архитектуры.
.It Cm worlds
Подобно
.Cm universe
с
.Va WITHOUT_KERNELS
определенной таким образом, что создаются только миры для каждой архитектуры.
.It Cm targets
Выводит список поддерживаемых пар
.Va TARGET
/
.Va TARGET_ARCH
для целевых объектов мирового уровня и ядра.
.It Cm tinderbox
Выполнет те же задачи, что и
.Cm universe .
В дополнение в конце выведет сводку по всем неудачным целям и
завершит работу с ошибкой, если таковая была.
.It Cm toolchains
Создаёт инструментальные средства построения для каждой архитектуры,
поддерживаемой системой сборки.
.It Cm xdev
Создает и устанавливает перекрестную цепочку инструментов и системный корень для заданного
.Sy TARGET
и
.Sy TARGET_ARCH .
Системный корень содержит целевую библиотеку и заголовки.
Целевой объект выполняет функцию псевдонима для
.Cm xdev-build
и
.Cm xdev-install .
Управлять местоположением всех установленных файлов можно с помощью
.Va DESTDIR .
Целевой объект расположенный в
.Va DESTDIR
это
.Pa ${DESTDIR}/${XDTP}
где значение
.Va XDTP
по умолчанию равно
.Pa /usr/${XDDIR} ,
а значение
.Va XDDIR
равно
.Pa ${TARGET_ARCH}-freebsd .
.It Cm xdev-build
Создаёт целевой объект
.Cm xdev .
.It Cm xdev-install
Устанавливает файлы для целевого объекта
.Cm xdev .
.It Cm xdev-links
Устанавливает символические ссылки в стиле autoconf в
.Pa ${DESTDIR}/usr/bin ,
указывающие на набор инструментов разработки в
.Pa ${DESTDIR}/${XDTP} .
.El
.Pp
Целями сборки, специфичными для ядра, в
.Pa /usr/src
являются:
.Bl -tag -width ".Cm distributekernel"
.It Cm buildkernel
Перестраивает ядро и модули ядра.
Каталог объекта можно изменить на каталог по умолчанию
.Pa /usr/obj
изменив переменную
.Pa MAKEOBJDIRPREFIX
.Xr make 1 .
.It Cm installkernel
Установливает ядро и модули ядра напрямую в каталог
.Pa ${DESTDIR}/boot/kernel ,
переименовывает любой ранее существовавший
каталог с таким именем в
.Pa kernel.old
если он содержал запущенное в данный момент ядро.
Целевой каталог в
.Pa ${DESTDIR}
может быть изменен с помощью
.Va INSTKERNNAME
и
.Va KODIR
.Xr make 1
переменных.
.It Cm distributekernel
Установливает ядро в каталог
.Pa ${DISTDIR}/kernel/boot/kernel .
тот целевой объект используется при сборке-релизе; смотрите
.Xr release 7 .
.It Cm packagekernel
Архивирует результаты
.Cm distributekernel ,
помещая их в
.Va DISTDIR .
Этот целевой объект используется при сборке-релизе; смотрите
.Xr release 7 .
.It Cm kernel
Аналогично
.Cm buildkernel
за которым следует
.Cm installkernel
.It Cm kernel-toolchain
Перестраивает инструменты, необходимые для компиляции ядра.
Используйте в том случае, если вы сначала не создавали
.Cm buildworld .
.It Cm reinstallkernel
Переустанавливает ядро и модули ядра,
перезаписав содержимое целевого каталога. 
Как и в случае с 
.Cm installkernel
целевой каталог можно указать с помощью переменной 
.Xr make 1
.Va INSTKERNNAME .
.El
.Pp
Convenience targets for cleaning up the install destination directory
denoted by variable
.Va DESTDIR
include:
.Bl -tag -width ".Cm delete-old-libs"
.It Cm check-old
Выводит список старых файлов и каталогов в
системе.
.It Cm delete-old
Удаляет устаревшие системные файлы и каталоги последовательно.
Если в командной строке указано значение
.Li -DBATCH_DELETE_OLD_FILES ,
то операция удаления будет неинтерактивной.
Переменные
.Va DESTDIR ,
.Va TARGET_ARCH
и
.Va TARGET
должны быть установлены так же, как в случае с
.Dq Li "make installworld" .
.It Cm delete-old-libs
Удаляет устаревшие базовые системные библиотеки в интерактивном режиме.
Этот метод должен использоваться только если никакая третья сторона
программного обеспечения не использует эти библиотеки.
Если в командной строке указан параметр
.Li -DBATCH_DELETE_OLD_FILES ,
то операция удаления будет неинтерактивной.
Переменные
.Va DESTDIR ,
.Va TARGET_ARCH
и
.Va TARGET
должны быть установлены так же, как в случае с
.Dq Li "make installworld" .
.El
.Sh ОКРУЖЕНИЕ
Переменные, влияющие на все сборки, включают:
.Bl -tag -width ".Va MAKEOBJDIRPREFIX"
.It Va DEBUG_FLAGS
Определяет набор флагов отладки, которые будут использоваться для
создания всех двоичных файлов пользовательской области в
.Pa /usr/src .
Когда
.Va DEBUG_FLAGS
определен,
.Cm install
и
.Cm installworld
установливают двоичные файлы из текущего
.Va MAKEOBJDIRPREFIX
без удаления, так что информация об отладке сохраняется в установленных двоичных файлах.
.It Va DESTDIR
Префикс иерархии каталогов, в который будут установлены встроенные объекты..
Если он не задан, в
.Va DESTDIR
по умолчанию используется пустая строка.
.It Va MAKEOBJDIRPREFIX
Определяет префикс для имен каталогов в дереве созданных объектов.
По умолчанию используется
.Pa /usr/obj ,
если он не определен.
Эта переменная должна быть установлена только в среде или
.Pa /etc/src-env.conf ,
а не через
.Pa /etc/make.conf
или
.Pa /etc/src.conf
или командную строку.
.It Va WITHOUT_WERROR
Если определен, предупреждения компилятора не приведут к
остановке сборки, даже если в makefile указано обратное.
.It Va WITH_CTF
Если этот параметр задан, в процессе построения будет запущен
DTrace CTF инструменты преобразования для построенных объектов.
.El
.Pp
Кроме того, на сборки в
.Pa /usr/src
влияют следующие переменные
.Xr make 1 :
.Bl -tag -width ".Va LOCAL_MODULES_DIR"
.It Va CROSS_TOOLCHAIN
Запрашивает использование внешней цепочки инструментов для создания
внешнего мира или ядра. Значение этой переменной может быть либо полным путем к файлу,
либо базовым именем файла в
.Pa ${LOCALBASE}/share/toolchains .
Файл должен быть make-файлом, который устанавливает переменные для запроса
внешней цепочки инструментов, такой как
.Va XCC .
.Pp
Внешние цепочки инструментов доступны в портах как для LLVM, так и для GCC/binutils.
Для внешних цепочек инструментов доступных в портах, параметр
.Va CROSS_TOOLCHAIN
должен быть равен имени пакета.
LLVM пакеты инструментальных цепочек используют имя llvm<major version>.
GCC набор инструментов предоставляет отдельные пакеты для каждой архитектуры и
использует имя ${MACHINE_ARCH}-gcc<major version>.
.It Va KERNCONF
Определяет, какое ядро собирать и устанавливать для различных целевых компонентов ядра.
По умолчанию используется
.Cm GENERIC .
.It Va KERNCONFDIR
Переопределяет каталог, в котором должен быть найден
.Va KERNCONF
и все файлы, включенные в
.Va KERNCONF .
По умолчанию используется
.Pa sys/${ARCH}/conf .
.It Va KERNFAST
Если задано значение, для целевого ядра сборки 
.Cm buildkernel
по умолчанию используются параметры
.Va NO_KERNELCLEAN ,
.Va NO_KERNELCONFIG ,
и
.Va NO_KERNELOBJ .
Если задано значение, отличное от
.Cm 1
то для
.Va KERNCONF
устанавливается значение
.Va KERNFAST .
.It Va LOCAL_DIRS
Если эта переменная задана, она предоставляет список дополнительных
каталогов, относящихся к корню дерева исходного кода,
которые будут созданы как часть целевого объекта
.Cm everything .
Каталоги
создаются параллельно друг с другом и
с базовыми системными каталогами.
Устанавливает директиву
.Va .WAIT
в начало списка
.Va LOCAL_DIRS ,
гарантирующую, что все базовые системные каталоги будут созданы первыми.
.Va .WAIT
также может использоваться при необходимости в других местах списка.
.It Va LOCAL_ITOOLS
Если эта переменная задана, она предоставляет список дополнительных
инструментов, которые используются целевыми объектами
.Cm installworld
и
.Cm distributeworld.
.It Va LOCAL_LIB_DIRS
Если эта переменная задана, она предоставляет список дополнительных каталогов,
относящихся к корню дерева исходного кода,
которые будут созданы как часть целевых библиотек
.Cm libraries.
Каталоги создаются параллельно друг с другом и
с базовыми системными библиотеками.
Устанавливает директиву
.Va .WAIT
в начало списка
.Va LOCAL_DIRS
чтобы убедиться, что все базовые системные библиотеки будут созданы первыми.
.Va .WAIT
также может использоваться при необходимости в других местах списка.
.It Va LOCAL_MTREE
Если эта переменная задана, она предоставляет список дополнительных
параметров относительно корня исходного дерева для
использования в качестве части целевой иерархии
.Cm hierarchy .
.It Va LOCAL_LEGACY_DIRS
Если эта переменная задана, она предоставляет список дополнительных
каталогов относительно корня исходного дерева,
которые будут созданы как часть унаследованного целевого объекта
.Cm legacy .
.It Va LOCAL_BSTOOL_DIRS
Если эта переменная задана, она предоставляет список дополнительных
каталогов, относящихся к корню дерева исходного кода,
для создания в рамках целевой программы
.Cm bootstrap-tools .
.It Va LOCAL_TOOL_DIRS
Если эта переменная задана, она предоставляет список дополнительных
каталогов относительно корня дерева исходных текстов
для сборки как части целевого объекта
.Cm build-tools .
.It Va LOCAL_XTOOL_DIRS
Если эта переменная задана, она предоставляет список дополнительных
каталогов, относящихся к корню дерева исходных текстов,
для создания в рамках целевой программы
.Cm cross-tools .
.It Va PORTS_MODULES
Список портов с модулями ядра, которые должны быть
собраны и установлены в рамках процессов
.Cm buildkernel
и
.Cm installkernel .
.Bd -literal -offset indent
make PORTS_MODULES=emulators/virtualbox-ose-kmod kernel
.Ed
.It Va LOCAL_MODULES
Список внешних модулей ядра, которые должны быть
собраны и установлены в рамках
.Cm buildkernel
и
.Cm installkernel
процессов.
По умолчанию используется список вспомогательных каталогов
.Va LOCAL_MODULES_DIR .
.It Va LOCAL_MODULES_DIR
Каталог, в котором следует искать модули ядра, указанные в параметре
.Va LOCAL_MODULES .
Каждый модуль ядра должен состоять из каталога, содержащего makefile.
о умолчанию используется
.Pa ${LOCALBASE}/sys/modules .
.It Va SRCCONF
Указывает файл, который будет переопределять значение по умолчанию
.Pa /etc/src.conf .
Файл src.conf управляет компонентами для сборки.
Смотрите
.Xr src.conf 5
.It Va STRIPBIN
Команда, используемая во время установки при удалении двоичных файлов.
Обязательно добавьте все необходимые дополнительные инструменты для запуска
.Va STRIPBIN
в переменную
.Va LOCAL_ITOOLS
.Xr make 1
перед запуском
.Cm distributeworld
или
.Cm installworld .
Смотрите
.Xr install 1
для более подробной информации.
.It Va SUBDIR_OVERRIDE
Переопределяет список подкаталогов по умолчанию и
создаёт только тот подкаталог, который указан в этой переменной.
При объединении с
.Cm buildworld
все библиотеки и включения,
а также некоторые инструменты сборки по-прежнему будут работать.
Указание
.Cm -DNO_LIBS ,
и
.Cm -DWORLDFAST
приведет только к созданию указанного каталога,
как это делалось исторически.
В сочетании с
.Cm buildworld
еобходимо переопределить
.Va LOCAL_LIB_DIRS
для любых пользовательских каталогов, содержащих библиотеки.
Это позволяет создавать подмножество системы таким же образом,
как это делает
.Cm buildworld
используя его системный корень.
Эта переменная также может быть полезна при отладке сбойных сборок.
.Bd -literal -offset indent
make some-target SUBDIR_OVERRIDE=foo/bar
.Ed
.It Va SYSDIR
Указывает расположение исходного кода ядра, чтобы заменить стандартный
.Pa /usr/src/sys .
Исходный код ядра находится в подкаталоге
.Pa sys
дерева исходных текстов,
извлеченных из репозитория
.Pa src.git .
.It Va TARGET
Целевая аппаратная платформа. Это аналогично выводу
.Dq Nm uname Fl m .
Это необходимо для перекрестной сборки некоторых целевых архитектур.
Например, для перекрестной сборки для машин ARM64 требуется
.Va TARGET_ARCH Ns = Ns Li aarch64
и
.Va TARGET Ns = Ns Li arm64 .
Если значение не задано,
.Va TARGET 
по умолчанию использует текущую аппаратную платформу,
если только также не задано значение
.Va TARGET_ARCH ,
в этом случае оно возвращается к соответствующему
значению для данной архитектуры.
.It Va TARGET_ARCH
Архитектура процессора целевой машины.
Это аналогично выводу
.Dq Nm uname Fl p .
Установите это значение в перекрестную сборку для другой архитектуры.
Если значение не задано,
.Va TARGET_ARCH
по умолчанию соответствует текущей архитектуре компьютера, если только
.Va TARGET
также не задан, и в этом случае по умолчанию используется
соответствующее значение для данной платформы.
Как правило, требуется только установить
.Va TARGET .
.El
.Pp
На сборки в каталоге
.Pa /usr/src
также влияет определение одного или нескольких из следующих символов
с помощью параметра
.Fl D ,
находящегося в
.Xr make 1 :
.Bl -tag -width ".Va LOADER_DEFAULT_INTERP"
.It Va LOADER_DEFAULT_INTERP
Определяет какие именно загрузочные программы будут у
интерпретатора по умолчанию.
Допустимые значения:
.Dq 4th ,
.Dq lua ,
и
.Dq simp .
Это создает по умолчанию ссылку на файл
.Pa /boot/loader
для загрузчика с этим интерпритатором.
Он также определяет, какой интерфейс будет скомпилирован в
.Pa userboot .
.It Va NO_CLEANDIR
Если задано, целевые значения построения, которые очищают части
дерева объектов, используют аналог 
.Dq make clean
вместо
.Dq make cleandir .
.It Va NO_CLEAN
Если этот параметр установлен, файлы дерева объектов вообще не очищаются.
Это значение используется по умолчанию при использовании параметра
.Va WITH_META_MODE
с загруженным
.Xr filemon 4 .
Смотрите
.Xr src.conf 5
для получения дополнительной информации.
Установка
.Va NO_CLEAN
подразумевает
.Va NO_KERNELCLEAN ,
поэтому, когда задано значение
.Va NO_CLEAN
другие объекты ядра также не очищаются.
.It Va NO_CTF
Если этот параметр установлен в процессе сборки,
инструменты преобразования DTrace CTF для построенных объектов не запускаются.
.It Va NO_SHARE
Если этот параметр установлен, сборка не будет перенесена в подкаталог
.Pa /usr/src/share
(т.е. страницы руководства, файлы данных о языковых стандартах,
файлы данных о часовых поясах и другие
.Pa /usr/src/share
файлы, не будут восстановлены из их источников).
.It Va NO_KERNELCLEAN
Если этот параметр установлен, процесс сборки не запускает
.Dq make clean
как часть целевого объекта
.Cm buildkernel .
.It Va NO_KERNELCONFIG
Если этот параметр установлен, процесс сборки не запускает
.Xr config 8
как часть целевого объекта
.Cm buildkernel .
.It Va NO_KERNELOBJ
Если этот параметр установлен, процесс сборки не запускает
.Dq make obj
как часть целевого объекта
.Cm buildkernel .
.It Va NO_LIBS
Если этот параметр установлен, этап просмотра библиотек будет пропущен.
.It Va NO_OBJWALK
Если этот параметр установлен, каталоги объектов создаваться не будут.
Это следует использовать только в том случае, если каталоги объектов
были созданы в предыдущей сборке и новые каталоги не подключены.
.It Va UNIVERSE_TOOLCHAIN
Запрашивает использование цепочки инструментов,
созданной как часть целевого объекта
.Cm universe
в качестве внешней цепочки инструментов.
.It Va WORLDFAST
Если этот параметр установлен, в сборке
.Cm buildworld
по умолчанию установлены значения
.Va NO_CLEAN ,
.Va NO_OBJWALK ,
и будет пропущена большая часть этапов начальной загрузки.
Это приведет к загрузке библиотек и созданию всего пользовательского пространства.
Этот вариант следует использовать только тогда, когда известно,
что ни один из загрузчиков не нуждается в изменении и что
к сборке не были подключены новые каталоги.
.El
.Pp
На сборки в каталоге
.Pa /usr/doc
влияют следующие
.Xr make 1
переменные:
.Bl -tag -width ".Va DOC_LANG"
.It Va DOC_LANG
Если значение задано, то построение документации ограничивается языком
подкаталогов, указанных в качестве содержимого. Действие по умолчанию
заключается в создании документации для всех языков.
.El
.Pp
На сборки с использованием
.Cm universe
и связанных с ним целевых объектов влияют
следующие переменные
.Xr make 1 :
.Bl -tag -width ".Va USE_GCC_TOOLCHAINS"
.It Va JFLAG
Передаёт значение этой переменной каждой функции
.Xr make 1 ,
используемой для создания миров и ядер.
Это может использоваться для выполнения нескольких заданий в рамках одной сборки
архитектуры, при этом каждая архитектура создается последовательно.
.It Va MAKE_JUST_KERNELS
Создаёт ядра для каждой поддерживаемой архитектуры.
.It Va MAKE_JUST_WORLDS
Создаёт миры для каждой поддерживаемой архитектуры.
.It Va WITHOUT_WORLDS
Создаёт ядра для каждой поддерживаемой архитектуры.
.It Va WITHOUT_KERNELS
Создаёт миры для каждой поддерживаемой архитектуры.
.It Va UNIVERSE_TARGET
Выполняет указанную
.Xr make 1
для каждой поддерживаемой архитектуры, вместо действия по умолчанию
(создания мира и одного или нескольких ядер).
Это переменная подразумевает
.Va WITHOUT_KERNELS .
.It Va USE_GCC_TOOLCHAINS
Использует внешние цепочки инструментов GCC для создания запрошенной
цели.
Если необходимый пакет цепочки инструментов для поддерживаемой
архитектуры не установлен, сборка для этой архитектуры пропускается.
.It Va TARGETS
Создаёт только перечисленные целевые объекты вместо каждой поддерживаемой архитектуры.
.It Va EXTRA_TARGETS
В дополнение к поддерживаемым архитектурам,
создаёт полуподдерживаемые архитектуры. 
Полуподдерживаемая архитектура имееет поддержку создания в дереве
.Fx
но тестируется значительно реже и на самом деле она предназначена
для периферийных применений, которые не имеют широкого распространения.
.El
.Sh ФАЙЛЫ
.Bl -tag -width ".Pa /usr/share/examples/etc/make.conf" -compact
.It Pa /usr/doc/Makefile
.It Pa /usr/doc/share/mk/doc.project.mk
.It Pa /usr/ports/Mk/bsd.port.mk
.It Pa /usr/ports/Mk/bsd.sites.mk
.It Pa /usr/share/examples/etc/make.conf
.It Pa /usr/src/Makefile
.It Pa /usr/src/Makefile.inc1
.El
.Sh ПРИМЕРЫ
Для получения информации об
.Dq approved
методе обновления вашей системы с использованием последних версий
пожалуйста, ознакомьтесь с разделом
.Sx COMMON ITEMS
в разделе
.Pa src/UPDATING .
.Pp
Следующая последовательность команд может быть использована для перекрестной сборки
системы для архитектуры armv6 на хосте amd64:
.Bd -literal -offset indent
cd /usr/src
make TARGET_ARCH=armv6 buildworld buildkernel
make TARGET_ARCH=armv6 DESTDIR=/clients/arm installworld installkernel
.Ed
.Sh ИСТОРИЯ
Страница руководства
.Nm
впервые появились в
.Fx 4.3 .
.Sh СМОТРИТЕ ТАКЖЕ
.Xr cc 1 ,
.Xr install 1 ,
.Xr make 1 ,
.Xr make.conf 5 ,
.Xr src.conf 5 ,
.Xr arch 7 ,
.Xr pkg 7 ,
.Xr ports 7 ,
.Xr release 7 ,
.Xr tests 7 ,
.Xr config 8 ,
.Xr etcupdate 8 ,
.Xr reboot 8 ,
.Xr shutdown 8
.Sh АВТОРЫ
.An Mike W. Meyer Aq Mt mwm@mired.org
